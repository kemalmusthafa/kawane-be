// ==== Data Source & Generator ====
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

// Seeder configuration
generator seed {
  provider = "prisma-client-js"
}

// ==== ENUMS ====
enum Role {
  CUSTOMER
  STAFF
  ADMIN
}

enum OrderStatus {
  CHECKOUT
  PAID
  PENDING
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  CANCELLED
  EXPIRED
  SUCCEEDED
}

enum PaymentMethod {
  MIDTRANS
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum DealStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum DealType {
  PERCENTAGE
  FIXED_AMOUNT
  FLASH_SALE
}

// ==== MODELS ====

// üë§ User System
model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String?
  avatar         String    @default("https://res.cloudinary.com/dkpn9aqne/image/upload/v1759202380/blank-profile-picture-973460_1920_vyiidf.png")
  phone          String?
  isVerified     Boolean   @default(false)
  token          String?
  tokenExpiresIn DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isDeleted      Boolean   @default(false)
  deletedAt      DateTime?
  role           Role      @default(CUSTOMER)

  // Relations
  orders        Order[]
  addresses     Address[]
  notifications Notification[]
  wishlist      Wishlist[]
  reviews       Review[]
  cart          Cart?
}

// üìç Address (shipping / billing)
model Address {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  label      String?
  detail     String
  city       String
  province   String
  postalCode String?
  latitude   Float?
  longitude  Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  orders    Order[]
  shipments Shipment[]
}

// üëï Product Catalog
model Product {
  id          String         @id @default(uuid())
  name        String
  description String?
  price       Float
  sku         String?        @unique
  stock       Int            @default(0)
  status      ProductStatus  @default(ACTIVE)
  images      ProductImage[]
  category    Category?      @relation(fields: [categoryId], references: [id])
  categoryId  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  orderItems    OrderItem[]
  wishlist      Wishlist[]
  reviews       Review[]
  inventoryLogs InventoryLog[]
  cartItems     CartItem[]
  dealProducts  DealProduct[]
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// üéØ Deal System
model Deal {
  id          String      @id @default(uuid())
  title       String
  description String?
  type        DealType
  value       Float // Percentage or fixed amount
  status      DealStatus  @default(ACTIVE)
  startDate   DateTime
  endDate     DateTime
  image       String?
  images      DealImage[]
  isFlashSale Boolean     @default(false)
  maxUses     Int? // Maximum number of uses (null = unlimited)
  usedCount   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  dealProducts DealProduct[]
  orderItems   OrderItem[]
}

model DealImage {
  id        String   @id @default(uuid())
  url       String
  deal      Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  dealId    String
  createdAt DateTime @default(now())
}

model DealProduct {
  id        String   @id @default(uuid())
  deal      Deal     @relation(fields: [dealId], references: [id], onDelete: Cascade)
  dealId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())

  @@unique([dealId, productId])
}

// üõí Cart System
model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

// üõí Order System
model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  status      OrderStatus @default(PENDING)
  totalAmount Float
  isPaid      Boolean     @default(false)
  payment     Payment?
  shipment    Shipment?
  address     Address?    @relation(fields: [addressId], references: [id])
  addressId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id                 String  @id @default(uuid())
  order              Order   @relation(fields: [orderId], references: [id])
  orderId            String
  product            Product @relation(fields: [productId], references: [id])
  productId          String
  quantity           Int
  price              Float
  originalPrice      Float? // Original price before deal
  dealId             String? // Deal applied to this item
  deal               Deal?   @relation(fields: [dealId], references: [id])
  dealTitle          String? // Deal title for reference
  discountAmount     Float   @default(0) // Amount saved from deal
  discountPercentage Float   @default(0) // Percentage saved from deal
}

// üí≥ Payment
model Payment {
  id              String        @id @default(uuid())
  order           Order         @relation(fields: [orderId], references: [id])
  orderId         String        @unique
  status          PaymentStatus @default(PENDING)
  method          PaymentMethod
  amount          Float
  transactionId   String?
  snapToken       String?
  snapRedirectUrl String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// üì¶ Shipment (pengiriman / ongkir)
model Shipment {
  id            String   @id @default(uuid())
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       String   @unique
  courier       String? // JNE, J&T, GrabExpress, dll
  trackingNo    String?
  cost          Float    @default(0)
  estimatedDays Int?
  address       Address? @relation(fields: [addressId], references: [id])
  addressId     String?
  createdAt     DateTime @default(now())
}

// üîî Notification
model Notification {
  id          String    @id @default(uuid())
  isRead      Boolean   @default(false)
  title       String
  description String
  message     String?
  type        String?   @default("INFO")
  priority    String?   @default("MEDIUM")
  data        String? // JSON data for additional information
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)
  deletedAt   DateTime?
  url         String?
  user        User      @relation(fields: [userId], references: [id])
}

// üõçÔ∏è Wishlist (favorit customer)
model Wishlist {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
}

// ‚≠ê Review & Rating
model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

// üéÅ Discount / Voucher
model Discount {
  id          String    @id @default(uuid())
  code        String    @unique
  description String?
  percentage  Float?
  amount      Float? // flat discount
  validFrom   DateTime?
  validTo     DateTime?
  usageLimit  Int?
  usedCount   Int       @default(0)
  createdAt   DateTime  @default(now())
}

// üì¶ Inventory Log (monitoring stok)
model InventoryLog {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  change    Int // +restock, -jual
  note      String?
  createdAt DateTime @default(now())
}

// üìä Report System
model Report {
  id        String       @id @default(uuid())
  name      String
  type      ReportType
  period    String
  status    ReportStatus @default(GENERATING)
  createdAt DateTime     @default(now())
  size      String
  format    ReportFormat @default(PDF)
}

enum ReportType {
  SALES
  INVENTORY
  CUSTOMER
  PRODUCT
}

enum ReportStatus {
  GENERATING
  GENERATED
  FAILED
}

enum ReportFormat {
  PDF
  EXCEL
  CSV
}

// üì∏ Lookbook Photos
model LookbookPhoto {
  id          String   @id @default(uuid())
  title       String?
  description String?
  imageUrl    String
  order       Int      @default(0) // untuk mengatur urutan tampilan
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
